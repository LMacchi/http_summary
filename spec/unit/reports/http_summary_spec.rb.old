#! /usr/bin/env ruby
require 'spec_helper'
require 'puppet/reports'

http_summary = Puppet::Reports.report(:http_summary)

describe http_summary do
  let(:processor) do
    processor = Puppet::Transaction::Report.new('apply')
    processor.extend(Puppet::Reports.report(:http_summary))
  end

  describe "when setting up the connection" do
    let(:http) { stub_everything "http" }
    let(:httpok) { Net::HTTPOK.new('1.1', 200, '') }

    let!(:read_config) { MockFunction.new('read_config') { 
      |f|
        f.stubbed.with('/dev/null/http_summary.yaml').returns({'url' => 'http://localhost:8888/'})
      }
    }

    before :each do
      http.expects(:post).returns(httpok)
    end

    it "configures the connection for ssl when using https" do

      Puppet::Network::HttpPool.expects(:http_instance).with(
        'testing', 8888, true
      ).returns http

      processor.process
    end
  end
#
#    it "does not configure the connection for ssl when using http" do
#      Puppet::Network::HttpPool.expects(:http_instance).with(
#        'localhost', 8888, false
#      ).returns http
#
#      subject.process
#    end
#  end
#
#  describe "when making a request" do
#    let(:connection) { stub_everything "connection" }
#    let(:httpok) { Net::HTTPOK.new('1.1', 200, '') }
#    let(:options) { {:metric_id => [:puppet, :report, :http]} }
#
#    before :each do
#      Puppet::Network::HttpPool.expects(:http_instance).returns(connection)
#    end
#
#    it "should use the path specified by the 'reporturl' setting" do
#      before do
#        YAML.stubs(:load_file).with('/dev/null/http_summary_http.yaml')
#          .returns({'url' => 'http://localhost:8888/'})
#      end
#
#     report_path = url.path
#     connection.expects(:post).with(report_path, anything, anything, options).returns(httpok)
#
#      subject.process
#    end
#
#    it "should use the username and password specified by the 'reporturl' setting" do
#      before do
#        YAML.stubs(:load_file).with('/dev/null/http_summary_http.yaml')
#          .returns({'url' => 'https://user:pass@localhost:8888/'})
#      end
#
#      connection.expects(:post).with(anything, anything, anything,
#                                     {:metric_id => [:puppet, :report, :http],
#                                      :basic_auth => {
#                                        :user => 'user',
#                                        :password => 'pass'
#                                      }}).returns(httpok)
#
#      subject.process
#    end
#
#    it "should give the body as the report as JSON" do
#      connection.expects(:post).with(anything, subject.to_json, anything, options).returns(httpok)
#
#      subject.process
#    end
#
#    it "should set content-type to 'application/json'" do
#      connection.expects(:post).with(anything, anything, has_entry("Content-Type" => "application/json"), options).returns(httpok)
#
#      subject.process
#    end
#
#    Net::HTTPResponse::CODE_TO_OBJ.each do |code, klass|
#      if code.to_i >= 200 and code.to_i < 300
#        it "should succeed on http code #{code}" do
#          response = klass.new('1.1', code, '')
#          connection.expects(:post).returns(response)
#
#          Puppet.expects(:err).never
#          subject.process
#        end
#      end
#
#      if code.to_i >= 300 && ![301, 302, 307].include?(code.to_i)
#        it "should log error on http code #{code}" do
#          response = klass.new('1.1', code, '')
#          connection.expects(:post).returns(response)
#
#          Puppet.expects(:err)
#          subject.process
#        end
#      end
#    end
#
#  end
end
